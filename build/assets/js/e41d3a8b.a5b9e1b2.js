"use strict";(self.webpackChunkjaqstack_website=self.webpackChunkjaqstack_website||[]).push([[13],{3981:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"using-nosql","title":"Using NoSQL","description":"Learn how to use NoSQL databases in the JAQ Stack ecosystem for flexible and scalable data storage.","source":"@site/docs/03-using-nosql.md","sourceDirName":".","slug":"/using-nosql","permalink":"/docs/using-nosql","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-using-nosql.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using Angular","permalink":"/docs/using-angular"},"next":{"title":"DevOps","permalink":"/docs/devops"}}');var t=r(4848),a=r(8453);const s={},o="Using NoSQL",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Supported Databases",id:"supported-databases",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"Using Docker (Recommended)",id:"using-docker-recommended",level:4},{value:"Manual Installation",id:"manual-installation",level:4},{value:"Configuration",id:"configuration",level:2},{value:"Spring Boot Configuration",id:"spring-boot-configuration",level:3},{value:"Java Configuration",id:"java-configuration",level:3},{value:"Data Models",id:"data-models",level:2},{value:"Document Structure",id:"document-structure",level:3},{value:"Repository Pattern",id:"repository-pattern",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Data Modeling",id:"data-modeling",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Caching with Redis",id:"caching-with-redis",level:2},{value:"Data Migration",id:"data-migration",level:2},{value:"Monitoring and Maintenance",id:"monitoring-and-maintenance",level:2},{value:"Health Checks",id:"health-checks",level:3},{value:"Backup and Restore",id:"backup-and-restore",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"using-nosql",children:"Using NoSQL"})}),"\n",(0,t.jsx)(n.p,{children:"Learn how to use NoSQL databases in the JAQ Stack ecosystem for flexible and scalable data storage."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"NoSQL databases provide the data persistence layer for JAQ Stack, offering flexibility, scalability, and performance for modern applications."}),"\n",(0,t.jsx)(n.h2,{id:"supported-databases",children:"Supported Databases"}),"\n",(0,t.jsx)(n.p,{children:"JAQ Stack supports multiple NoSQL databases:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MongoDB"})," - Document database (Primary)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CouchDB"})," - Document database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Redis"})," - Key-value store"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cassandra"})," - Wide-column store"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Docker (recommended)"}),"\n",(0,t.jsx)(n.li,{children:"Java 17+ (for Spring Boot integration)"}),"\n",(0,t.jsx)(n.li,{children:"Node.js 18+ (for JavaScript/TypeScript integration)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h4,{id:"using-docker-recommended",children:"Using Docker (Recommended)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# MongoDB\r\ndocker run -d --name mongodb \\\r\n  -p 27017:27017 \\\r\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\r\n  -e MONGO_INITDB_ROOT_PASSWORD=password \\\r\n  mongo:latest\r\n\r\n# Redis\r\ndocker run -d --name redis \\\r\n  -p 6379:6379 \\\r\n  redis:latest\r\n\r\n# CouchDB\r\ndocker run -d --name couchdb \\\r\n  -p 5984:5984 \\\r\n  -e COUCHDB_USER=admin \\\r\n  -e COUCHDB_PASSWORD=password \\\r\n  couchdb:latest\n"})}),"\n",(0,t.jsx)(n.h4,{id:"manual-installation",children:"Manual Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# MongoDB (Ubuntu/Debian)\r\nwget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -\r\necho "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list\r\nsudo apt-get update\r\nsudo apt-get install -y mongodb-org\r\n\r\n# Redis (Ubuntu/Debian)\r\nsudo apt update\r\nsudo apt install redis-server\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"spring-boot-configuration",children:"Spring Boot Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"# application.properties\r\n# MongoDB Configuration\r\nspring.data.mongodb.host=localhost\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=jaqstack\r\nspring.data.mongodb.username=admin\r\nspring.data.mongodb.password=password\r\nspring.data.mongodb.authentication-database=admin\r\n\r\n# Redis Configuration\r\nspring.redis.host=localhost\r\nspring.redis.port=6379\r\nspring.redis.password=\r\nspring.redis.timeout=2000ms\r\nspring.redis.jedis.pool.max-active=8\r\nspring.redis.jedis.pool.max-idle=8\r\nspring.redis.jedis.pool.min-idle=0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"java-configuration",children:"Java Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// MongoDB Configuration\r\n@Configuration\r\n@EnableMongoRepositories\r\npublic class MongoConfig {\r\n    \r\n    @Value("${spring.data.mongodb.host}")\r\n    private String host;\r\n    \r\n    @Value("${spring.data.mongodb.port}")\r\n    private int port;\r\n    \r\n    @Value("${spring.data.mongodb.database}")\r\n    private String database;\r\n    \r\n    @Bean\r\n    public MongoClient mongoClient() {\r\n        return MongoClients.create(\r\n            MongoClientSettings.builder()\r\n                .applyToClusterSettings(builder -> \r\n                    builder.hosts(Arrays.asList(new ServerAddress(host, port))))\r\n                .build()\r\n        );\r\n    }\r\n    \r\n    @Bean\r\n    public MongoTemplate mongoTemplate() {\r\n        return new MongoTemplate(mongoClient(), database);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-models",children:"Data Models"}),"\n",(0,t.jsx)(n.h3,{id:"document-structure",children:"Document Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// User Document\r\n@Document(collection = "users")\r\npublic class User {\r\n    @Id\r\n    private String id;\r\n    \r\n    @Field("name")\r\n    private String name;\r\n    \r\n    @Field("email")\r\n    private String email;\r\n    \r\n    @Field("profile")\r\n    private UserProfile profile;\r\n    \r\n    @Field("created_at")\r\n    private LocalDateTime createdAt;\r\n    \r\n    @Field("updated_at")\r\n    private LocalDateTime updatedAt;\r\n    \r\n    // Constructors, getters, setters\r\n}\r\n\r\n// Embedded Document\r\n@Document\r\npublic class UserProfile {\r\n    private String bio;\r\n    private String avatar;\r\n    private List<String> skills;\r\n    private Map<String, Object> preferences;\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"repository-pattern",children:"Repository Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Repository\r\npublic interface UserRepository extends MongoRepository<User, String> {\r\n    \r\n    // Custom query methods\r\n    List<User> findByNameContainingIgnoreCase(String name);\r\n    \r\n    List<User> findByEmail(String email);\r\n    \r\n    @Query(\"{ 'profile.skills': { $in: ?0 } }\")\r\n    List<User> findBySkillsIn(List<String> skills);\r\n    \r\n    @Query(\"{ 'created_at': { $gte: ?0, $lte: ?1 } }\")\r\n    List<User> findByCreatedAtBetween(LocalDateTime start, LocalDateTime end);\r\n    \r\n    // Aggregation queries\r\n    @Aggregation(\"{ $group: { _id: '$role', count: { $sum: 1 } } }\")\r\n    List<RoleCount> countUsersByRole();\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"data-modeling",children:"Data Modeling"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Denormalization"}),": Store related data together for better performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Embedding vs Referencing"}),": Embed for 1:1 or 1",":few"," relationships"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Indexing"}),": Create indexes on frequently queried fields"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Schema Design"}),": Design for your query patterns"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Index Configuration\r\n@Document(collection = "users")\r\n@CompoundIndex(def = "{\'name\': 1, \'email\': 1}")\r\n@CompoundIndex(def = "{\'created_at\': -1}")\r\npublic class User {\r\n    // Document fields\r\n}\r\n\r\n// Query Optimization\r\n@Service\r\npublic class UserService {\r\n    \r\n    @Autowired\r\n    private UserRepository userRepository;\r\n    \r\n    public List<User> findUsersOptimized(String name) {\r\n        // Use projection to limit returned fields\r\n        Query query = new Query();\r\n        query.addCriteria(Criteria.where("name").regex(name, "i"));\r\n        query.fields().include("name", "email", "profile.avatar");\r\n        \r\n        return mongoTemplate.find(query, User.class);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"caching-with-redis",children:"Caching with Redis"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Configuration\r\n@EnableCaching\r\npublic class CacheConfig {\r\n    \r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(connectionFactory);\r\n        template.setDefaultSerializer(new GenericJackson2JsonRedisSerializer());\r\n        return template;\r\n    }\r\n    \r\n    @Bean\r\n    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {\r\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\r\n            .entryTtl(Duration.ofMinutes(10))\r\n            .serializeKeysWith(RedisSerializationContext.SerializationPair\r\n                .fromSerializer(new StringRedisSerializer()))\r\n            .serializeValuesWith(RedisSerializationContext.SerializationPair\r\n                .fromSerializer(new GenericJackson2JsonRedisSerializer()));\r\n        \r\n        return RedisCacheManager.builder(connectionFactory)\r\n            .cacheDefaults(config)\r\n            .build();\r\n    }\r\n}\r\n\r\n// Using Cache\r\n@Service\r\npublic class UserService {\r\n    \r\n    @Cacheable(value = "users", key = "#id")\r\n    public User findById(String id) {\r\n        return userRepository.findById(id)\r\n            .orElseThrow(() -> new UserNotFoundException(id));\r\n    }\r\n    \r\n    @CacheEvict(value = "users", key = "#user.id")\r\n    public User updateUser(User user) {\r\n        return userRepository.save(user);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-migration",children:"Data Migration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\r\npublic class DataMigrationService {\r\n    \r\n    @Autowired\r\n    private MongoTemplate mongoTemplate;\r\n    \r\n    @EventListener\r\n    public void handleContextRefresh(ContextRefreshedEvent event) {\r\n        migrateUserData();\r\n    }\r\n    \r\n    private void migrateUserData() {\r\n        // Example migration: Add new field to existing documents\r\n        Query query = new Query();\r\n        Update update = new Update().set("migrated", true);\r\n        \r\n        UpdateResult result = mongoTemplate.updateMulti(query, update, User.class);\r\n        log.info("Migrated {} user documents", result.getModifiedCount());\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-maintenance",children:"Monitoring and Maintenance"}),"\n",(0,t.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\r\npublic class DatabaseHealthIndicator implements HealthIndicator {\r\n    \r\n    @Autowired\r\n    private MongoTemplate mongoTemplate;\r\n    \r\n    @Override\r\n    public Health health() {\r\n        try {\r\n            mongoTemplate.getCollection("users").countDocuments();\r\n            return Health.up()\r\n                .withDetail("database", "MongoDB")\r\n                .withDetail("status", "Connected")\r\n                .build();\r\n        } catch (Exception e) {\r\n            return Health.down()\r\n                .withDetail("database", "MongoDB")\r\n                .withDetail("error", e.getMessage())\r\n                .build();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"backup-and-restore",children:"Backup and Restore"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# MongoDB Backup\r\nmongodump --host localhost:27017 --db jaqstack --out /backup/jaqstack\r\n\r\n# MongoDB Restore\r\nmongorestore --host localhost:27017 --db jaqstack /backup/jaqstack\r\n\r\n# Redis Backup\r\nredis-cli BGSAVE\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Timeout"}),": Check network connectivity and firewall settings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Usage"}),": Monitor memory consumption and adjust cache settings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Index Performance"}),": Analyze slow queries and optimize indexes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Consistency"}),": Implement proper transaction handling"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\r\npublic class DatabaseMetrics {\r\n    \r\n    @Autowired\r\n    private MongoTemplate mongoTemplate;\r\n    \r\n    @Scheduled(fixedRate = 60000) // Every minute\r\n    public void collectMetrics() {\r\n        // Collect database metrics\r\n        Document stats = mongoTemplate.getDb().runCommand(new Document("dbStats", 1));\r\n        log.info("Database stats: {}", stats);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check the ",(0,t.jsx)(n.a,{href:"https://github.com/jaqstack/jaqstack-nosql/issues",children:"GitHub Issues"})]}),"\n",(0,t.jsxs)(n.li,{children:["Join our ",(0,t.jsx)(n.a,{href:"https://discord.gg/jaqstack",children:"Discord Community"})]}),"\n",(0,t.jsxs)(n.li,{children:["Read the ",(0,t.jsx)(n.a,{href:"https://docs.mongodb.com/",children:"MongoDB Documentation"})]}),"\n",(0,t.jsxs)(n.li,{children:["Read the ",(0,t.jsx)(n.a,{href:"https://redis.io/documentation",children:"Redis Documentation"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/using-java",children:"Using Java"})," - Backend integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/using-angular",children:"Using Angular"})," - Frontend development"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/devops",children:"DevOps"})," - Deployment and operations"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(6540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);