"use strict";(self.webpackChunkjaqstack_website=self.webpackChunkjaqstack_website||[]).push([[130],{8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>o});var a=r(6540);const s={},t=a.createContext(s);function i(n){const e=a.useContext(t);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(t.Provider,{value:e},n.children)}},8963:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"devops","title":"DevOps","description":"Learn how to deploy, monitor, and maintain JAQ Stack applications using modern DevOps practices.","source":"@site/docs/04-devops.md","sourceDirName":".","slug":"/devops","permalink":"/docs/devops","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-devops.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using NoSQL","permalink":"/docs/using-nosql"}}');var s=r(4848),t=r(8453);const i={},o="DevOps",c={},l=[{value:"Overview",id:"overview",level:2},{value:"CI/CD Pipeline",id:"cicd-pipeline",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Containerization",id:"containerization",level:2},{value:"Docker Configuration",id:"docker-configuration",level:3},{value:"Backend Dockerfile",id:"backend-dockerfile",level:4},{value:"Frontend Dockerfile",id:"frontend-dockerfile",level:4},{value:"Docker Compose",id:"docker-compose",level:4},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:2},{value:"Namespace",id:"namespace",level:3},{value:"ConfigMap",id:"configmap",level:3},{value:"Secrets",id:"secrets",level:3},{value:"MongoDB Deployment",id:"mongodb-deployment",level:3},{value:"Backend Deployment",id:"backend-deployment",level:3},{value:"Frontend Deployment",id:"frontend-deployment",level:3},{value:"Ingress",id:"ingress",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Prometheus Configuration",id:"prometheus-configuration",level:3},{value:"Grafana Dashboard",id:"grafana-dashboard",level:3},{value:"Application Monitoring",id:"application-monitoring",level:3},{value:"Logging",id:"logging",level:2},{value:"Centralized Logging",id:"centralized-logging",level:3},{value:"Application Logging",id:"application-logging",level:3},{value:"Security",id:"security",level:2},{value:"Security Scanning",id:"security-scanning",level:3},{value:"Network Policies",id:"network-policies",level:3},{value:"Backup and Disaster Recovery",id:"backup-and-disaster-recovery",level:2},{value:"Database Backup",id:"database-backup",level:3},{value:"Disaster Recovery Plan",id:"disaster-recovery-plan",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"devops",children:"DevOps"})}),"\n",(0,s.jsx)(e.p,{children:"Learn how to deploy, monitor, and maintain JAQ Stack applications using modern DevOps practices."}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(e.p,{children:"DevOps practices for JAQ Stack focus on automation, monitoring, and continuous delivery to ensure reliable and scalable applications."}),"\n",(0,s.jsx)(e.h2,{id:"cicd-pipeline",children:"CI/CD Pipeline"}),"\n",(0,s.jsx)(e.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/ci-cd.yml\r\nname: CI/CD Pipeline\r\n\r\non:\r\n  push:\r\n    branches: [ main, develop ]\r\n  pull_request:\r\n    branches: [ main ]\r\n\r\njobs:\r\n  test:\r\n    runs-on: ubuntu-latest\r\n    \r\n    services:\r\n      mongodb:\r\n        image: mongo:latest\r\n        ports:\r\n          - 27017:27017\r\n      redis:\r\n        image: redis:latest\r\n        ports:\r\n          - 6379:6379\r\n    \r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    \r\n    - name: Set up JDK 17\r\n      uses: actions/setup-java@v3\r\n      with:\r\n        java-version: '17'\r\n        distribution: 'temurin'\r\n    \r\n    - name: Set up Node.js\r\n      uses: actions/setup-node@v3\r\n      with:\r\n        node-version: '18'\r\n        cache: 'npm'\r\n    \r\n    - name: Cache Maven dependencies\r\n      uses: actions/cache@v3\r\n      with:\r\n        path: ~/.m2\r\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\r\n    \r\n    - name: Install dependencies\r\n      run: |\r\n        cd backend && mvn clean install -DskipTests\r\n        cd ../frontend && npm ci\r\n    \r\n    - name: Run backend tests\r\n      run: |\r\n        cd backend && mvn test\r\n    \r\n    - name: Run frontend tests\r\n      run: |\r\n        cd frontend && npm test -- --coverage --watchAll=false\r\n    \r\n    - name: Build application\r\n      run: |\r\n        cd backend && mvn package -DskipTests\r\n        cd ../frontend && npm run build\r\n    \r\n    - name: Upload test results\r\n      uses: actions/upload-artifact@v3\r\n      if: always()\r\n      with:\r\n        name: test-results\r\n        path: |\r\n          backend/target/surefire-reports/\r\n          frontend/coverage/\r\n\r\n  deploy:\r\n    needs: test\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == 'refs/heads/main'\r\n    \r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    \r\n    - name: Deploy to staging\r\n      run: |\r\n        echo \"Deploying to staging environment...\"\r\n        # Add your deployment commands here\r\n    \r\n    - name: Run smoke tests\r\n      run: |\r\n        echo \"Running smoke tests...\"\r\n        # Add smoke test commands here\r\n    \r\n    - name: Deploy to production\r\n      run: |\r\n        echo \"Deploying to production environment...\"\r\n        # Add production deployment commands here\n"})}),"\n",(0,s.jsx)(e.h2,{id:"containerization",children:"Containerization"}),"\n",(0,s.jsx)(e.h3,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,s.jsx)(e.h4,{id:"backend-dockerfile",children:"Backend Dockerfile"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'# backend/Dockerfile\r\nFROM openjdk:17-jdk-slim\r\n\r\nWORKDIR /app\r\n\r\n# Copy Maven files\r\nCOPY pom.xml .\r\nCOPY src ./src\r\n\r\n# Install Maven\r\nRUN apt-get update && apt-get install -y maven\r\n\r\n# Build the application\r\nRUN mvn clean package -DskipTests\r\n\r\n# Expose port\r\nEXPOSE 8080\r\n\r\n# Run the application\r\nCMD ["java", "-jar", "target/jaqstack-backend.jar"]\n'})}),"\n",(0,s.jsx)(e.h4,{id:"frontend-dockerfile",children:"Frontend Dockerfile"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'# frontend/Dockerfile\r\nFROM node:18-alpine AS builder\r\n\r\nWORKDIR /app\r\n\r\n# Copy package files\r\nCOPY package*.json ./\r\n\r\n# Install dependencies\r\nRUN npm ci --only=production\r\n\r\n# Copy source code\r\nCOPY . .\r\n\r\n# Build the application\r\nRUN npm run build\r\n\r\n# Production stage\r\nFROM nginx:alpine\r\n\r\n# Copy built files\r\nCOPY --from=builder /app/dist /usr/share/nginx/html\r\n\r\n# Copy nginx configuration\r\nCOPY nginx.conf /etc/nginx/nginx.conf\r\n\r\n# Expose port\r\nEXPOSE 80\r\n\r\nCMD ["nginx", "-g", "daemon off;"]\n'})}),"\n",(0,s.jsx)(e.h4,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# docker-compose.yml\r\nversion: \'3.8\'\r\n\r\nservices:\r\n  mongodb:\r\n    image: mongo:latest\r\n    container_name: jaqstack-mongodb\r\n    ports:\r\n      - "27017:27017"\r\n    environment:\r\n      MONGO_INITDB_ROOT_USERNAME: admin\r\n      MONGO_INITDB_ROOT_PASSWORD: password\r\n    volumes:\r\n      - mongodb_data:/data/db\r\n    networks:\r\n      - jaqstack-network\r\n\r\n  redis:\r\n    image: redis:latest\r\n    container_name: jaqstack-redis\r\n    ports:\r\n      - "6379:6379"\r\n    volumes:\r\n      - redis_data:/data\r\n    networks:\r\n      - jaqstack-network\r\n\r\n  backend:\r\n    build: ./backend\r\n    container_name: jaqstack-backend\r\n    ports:\r\n      - "8080:8080"\r\n    environment:\r\n      SPRING_DATA_MONGODB_HOST: mongodb\r\n      SPRING_DATA_MONGODB_PORT: 27017\r\n      SPRING_REDIS_HOST: redis\r\n      SPRING_REDIS_PORT: 6379\r\n    depends_on:\r\n      - mongodb\r\n      - redis\r\n    networks:\r\n      - jaqstack-network\r\n\r\n  frontend:\r\n    build: ./frontend\r\n    container_name: jaqstack-frontend\r\n    ports:\r\n      - "80:80"\r\n    depends_on:\r\n      - backend\r\n    networks:\r\n      - jaqstack-network\r\n\r\nvolumes:\r\n  mongodb_data:\r\n  redis_data:\r\n\r\nnetworks:\r\n  jaqstack-network:\r\n    driver: bridge\n'})}),"\n",(0,s.jsx)(e.h2,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,s.jsx)(e.h3,{id:"namespace",children:"Namespace"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# k8s/namespace.yaml\r\napiVersion: v1\r\nkind: Namespace\r\nmetadata:\r\n  name: jaqstack\n"})}),"\n",(0,s.jsx)(e.h3,{id:"configmap",children:"ConfigMap"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# k8s/configmap.yaml\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: jaqstack-config\r\n  namespace: jaqstack\r\ndata:\r\n  MONGODB_HOST: mongodb-service\r\n  MONGODB_PORT: "27017"\r\n  REDIS_HOST: redis-service\r\n  REDIS_PORT: "6379"\r\n  API_URL: "http://backend-service:8080"\n'})}),"\n",(0,s.jsx)(e.h3,{id:"secrets",children:"Secrets"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# k8s/secrets.yaml\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: jaqstack-secrets\r\n  namespace: jaqstack\r\ntype: Opaque\r\ndata:\r\n  MONGODB_USERNAME: YWRtaW4=  # base64 encoded\r\n  MONGODB_PASSWORD: cGFzc3dvcmQ=  # base64 encoded\r\n  JWT_SECRET: eW91ci1qd3Qtc2VjcmV0  # base64 encoded\n"})}),"\n",(0,s.jsx)(e.h3,{id:"mongodb-deployment",children:"MongoDB Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# k8s/mongodb.yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: mongodb\r\n  namespace: jaqstack\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: mongodb\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: mongodb\r\n    spec:\r\n      containers:\r\n      - name: mongodb\r\n        image: mongo:latest\r\n        ports:\r\n        - containerPort: 27017\r\n        env:\r\n        - name: MONGO_INITDB_ROOT_USERNAME\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: jaqstack-secrets\r\n              key: MONGODB_USERNAME\r\n        - name: MONGO_INITDB_ROOT_PASSWORD\r\n          valueFrom:\r\n            secretKeyRef:\r\n              name: jaqstack-secrets\r\n              key: MONGODB_PASSWORD\r\n        volumeMounts:\r\n        - name: mongodb-storage\r\n          mountPath: /data/db\r\n      volumes:\r\n      - name: mongodb-storage\r\n        persistentVolumeClaim:\r\n          claimName: mongodb-pvc\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: mongodb-service\r\n  namespace: jaqstack\r\nspec:\r\n  selector:\r\n    app: mongodb\r\n  ports:\r\n  - port: 27017\r\n    targetPort: 27017\r\n---\r\napiVersion: v1\r\nkind: PersistentVolumeClaim\r\nmetadata:\r\n  name: mongodb-pvc\r\n  namespace: jaqstack\r\nspec:\r\n  accessModes:\r\n    - ReadWriteOnce\r\n  resources:\r\n    requests:\r\n      storage: 10Gi\n"})}),"\n",(0,s.jsx)(e.h3,{id:"backend-deployment",children:"Backend Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# k8s/backend.yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: backend\r\n  namespace: jaqstack\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: backend\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: backend\r\n    spec:\r\n      containers:\r\n      - name: backend\r\n        image: jaqstack/backend:latest\r\n        ports:\r\n        - containerPort: 8080\r\n        envFrom:\r\n        - configMapRef:\r\n            name: jaqstack-config\r\n        - secretRef:\r\n            name: jaqstack-secrets\r\n        livenessProbe:\r\n          httpGet:\r\n            path: /actuator/health\r\n            port: 8080\r\n          initialDelaySeconds: 30\r\n          periodSeconds: 10\r\n        readinessProbe:\r\n          httpGet:\r\n            path: /actuator/health/readiness\r\n            port: 8080\r\n          initialDelaySeconds: 5\r\n          periodSeconds: 5\r\n        resources:\r\n          requests:\r\n            memory: "512Mi"\r\n            cpu: "250m"\r\n          limits:\r\n            memory: "1Gi"\r\n            cpu: "500m"\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: backend-service\r\n  namespace: jaqstack\r\nspec:\r\n  selector:\r\n    app: backend\r\n  ports:\r\n  - port: 8080\r\n    targetPort: 8080\r\n  type: ClusterIP\n'})}),"\n",(0,s.jsx)(e.h3,{id:"frontend-deployment",children:"Frontend Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# k8s/frontend.yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: frontend\r\n  namespace: jaqstack\r\nspec:\r\n  replicas: 2\r\n  selector:\r\n    matchLabels:\r\n      app: frontend\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: frontend\r\n    spec:\r\n      containers:\r\n      - name: frontend\r\n        image: jaqstack/frontend:latest\r\n        ports:\r\n        - containerPort: 80\r\n        resources:\r\n          requests:\r\n            memory: "128Mi"\r\n            cpu: "100m"\r\n          limits:\r\n            memory: "256Mi"\r\n            cpu: "200m"\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: frontend-service\r\n  namespace: jaqstack\r\nspec:\r\n  selector:\r\n    app: frontend\r\n  ports:\r\n  - port: 80\r\n    targetPort: 80\r\n  type: LoadBalancer\n'})}),"\n",(0,s.jsx)(e.h3,{id:"ingress",children:"Ingress"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# k8s/ingress.yaml\r\napiVersion: networking.k8s.io/v1\r\nkind: Ingress\r\nmetadata:\r\n  name: jaqstack-ingress\r\n  namespace: jaqstack\r\n  annotations:\r\n    nginx.ingress.kubernetes.io/rewrite-target: /\r\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\r\nspec:\r\n  tls:\r\n  - hosts:\r\n    - jaqstack.example.com\r\n    secretName: jaqstack-tls\r\n  rules:\r\n  - host: jaqstack.example.com\r\n    http:\r\n      paths:\r\n      - path: /api\r\n        pathType: Prefix\r\n        backend:\r\n          service:\r\n            name: backend-service\r\n            port:\r\n              number: 8080\r\n      - path: /\r\n        pathType: Prefix\r\n        backend:\r\n          service:\r\n            name: frontend-service\r\n            port:\r\n              number: 80\n'})}),"\n",(0,s.jsx)(e.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,s.jsx)(e.h3,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# monitoring/prometheus.yml\r\nglobal:\r\n  scrape_interval: 15s\r\n\r\nscrape_configs:\r\n  - job_name: 'jaqstack-backend'\r\n    static_configs:\r\n      - targets: ['backend-service:8080']\r\n    metrics_path: '/actuator/prometheus'\r\n    scrape_interval: 5s\r\n\r\n  - job_name: 'jaqstack-mongodb'\r\n    static_configs:\r\n      - targets: ['mongodb-exporter:9216']\r\n\r\n  - job_name: 'jaqstack-redis'\r\n    static_configs:\r\n      - targets: ['redis-exporter:9121']\n"})}),"\n",(0,s.jsx)(e.h3,{id:"grafana-dashboard",children:"Grafana Dashboard"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "dashboard": {\r\n    "title": "JAQ Stack Monitoring",\r\n    "panels": [\r\n      {\r\n        "title": "Application Response Time",\r\n        "type": "graph",\r\n        "targets": [\r\n          {\r\n            "expr": "histogram_quantile(0.95, rate(http_server_requests_seconds_bucket[5m]))",\r\n            "legendFormat": "95th percentile"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        "title": "Database Connections",\r\n        "type": "graph",\r\n        "targets": [\r\n          {\r\n            "expr": "mongodb_connections_current",\r\n            "legendFormat": "MongoDB Connections"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"application-monitoring",children:"Application Monitoring"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'// Backend monitoring configuration\r\n@Configuration\r\n@EnableMetrics\r\npublic class MonitoringConfig {\r\n    \r\n    @Bean\r\n    public MeterRegistry meterRegistry() {\r\n        return new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);\r\n    }\r\n    \r\n    @Bean\r\n    public TimedAspect timedAspect(MeterRegistry registry) {\r\n        return new TimedAspect(registry);\r\n    }\r\n}\r\n\r\n// Custom metrics\r\n@Component\r\npublic class ApplicationMetrics {\r\n    \r\n    private final Counter requestCounter;\r\n    private final Timer requestTimer;\r\n    \r\n    public ApplicationMetrics(MeterRegistry meterRegistry) {\r\n        this.requestCounter = Counter.builder("jaqstack.requests.total")\r\n            .description("Total number of requests")\r\n            .register(meterRegistry);\r\n        \r\n        this.requestTimer = Timer.builder("jaqstack.requests.duration")\r\n            .description("Request duration")\r\n            .register(meterRegistry);\r\n    }\r\n    \r\n    public void incrementRequestCount() {\r\n        requestCounter.increment();\r\n    }\r\n    \r\n    public void recordRequestDuration(Duration duration) {\r\n        requestTimer.record(duration);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"logging",children:"Logging"}),"\n",(0,s.jsx)(e.h3,{id:"centralized-logging",children:"Centralized Logging"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# logging/fluentd-config.yaml\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: fluentd-config\r\n  namespace: jaqstack\r\ndata:\r\n  fluent.conf: |\r\n    <source>\r\n      @type tail\r\n      path /var/log/containers/*jaqstack*.log\r\n      pos_file /var/log/fluentd-containers.log.pos\r\n      tag kubernetes.*\r\n      format json\r\n      time_key time\r\n      time_format %Y-%m-%dT%H:%M:%S.%NZ\r\n    </source>\r\n    \r\n    <match kubernetes.**>\r\n      @type elasticsearch\r\n      host elasticsearch-service\r\n      port 9200\r\n      index_name jaqstack-logs\r\n      type_name _doc\r\n    </match>\n"})}),"\n",(0,s.jsx)(e.h3,{id:"application-logging",children:"Application Logging"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'// Logging configuration\r\n@Configuration\r\npublic class LoggingConfig {\r\n    \r\n    @Bean\r\n    public Logger jaqstackLogger() {\r\n        return LoggerFactory.getLogger("jaqstack");\r\n    }\r\n}\r\n\r\n// Structured logging\r\n@Service\r\npublic class UserService {\r\n    \r\n    private static final Logger logger = LoggerFactory.getLogger(UserService.class);\r\n    \r\n    public User createUser(User user) {\r\n        logger.info("Creating user", \r\n            kv("userId", user.getId()),\r\n            kv("email", user.getEmail()),\r\n            kv("timestamp", Instant.now()));\r\n        \r\n        try {\r\n            User createdUser = userRepository.save(user);\r\n            logger.info("User created successfully", \r\n                kv("userId", createdUser.getId()));\r\n            return createdUser;\r\n        } catch (Exception e) {\r\n            logger.error("Failed to create user", \r\n                kv("userId", user.getId()),\r\n                kv("error", e.getMessage()));\r\n            throw e;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"security",children:"Security"}),"\n",(0,s.jsx)(e.h3,{id:"security-scanning",children:"Security Scanning"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# security/trivy-scan.yaml\r\napiVersion: batch/v1\r\nkind: CronJob\r\nmetadata:\r\n  name: trivy-scan\r\n  namespace: jaqstack\r\nspec:\r\n  schedule: "0 2 * * *"  # Daily at 2 AM\r\n  jobTemplate:\r\n    spec:\r\n      template:\r\n        spec:\r\n          containers:\r\n          - name: trivy\r\n            image: aquasec/trivy:latest\r\n            command:\r\n            - trivy\r\n            - image\r\n            - --format\r\n            - json\r\n            - --output\r\n            - /tmp/scan-results.json\r\n            - jaqstack/backend:latest\r\n            volumeMounts:\r\n            - name: scan-results\r\n              mountPath: /tmp\r\n          volumes:\r\n          - name: scan-results\r\n            emptyDir: {}\r\n          restartPolicy: OnFailure\n'})}),"\n",(0,s.jsx)(e.h3,{id:"network-policies",children:"Network Policies"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# security/network-policy.yaml\r\napiVersion: networking.k8s.io/v1\r\nkind: NetworkPolicy\r\nmetadata:\r\n  name: jaqstack-network-policy\r\n  namespace: jaqstack\r\nspec:\r\n  podSelector:\r\n    matchLabels:\r\n      app: backend\r\n  policyTypes:\r\n  - Ingress\r\n  - Egress\r\n  ingress:\r\n  - from:\r\n    - podSelector:\r\n        matchLabels:\r\n          app: frontend\r\n    ports:\r\n    - protocol: TCP\r\n      port: 8080\r\n  egress:\r\n  - to:\r\n    - podSelector:\r\n        matchLabels:\r\n          app: mongodb\r\n    ports:\r\n    - protocol: TCP\r\n      port: 27017\r\n  - to:\r\n    - podSelector:\r\n        matchLabels:\r\n          app: redis\r\n    ports:\r\n    - protocol: TCP\r\n      port: 6379\n"})}),"\n",(0,s.jsx)(e.h2,{id:"backup-and-disaster-recovery",children:"Backup and Disaster Recovery"}),"\n",(0,s.jsx)(e.h3,{id:"database-backup",children:"Database Backup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"#!/bin/bash\r\n# scripts/backup.sh\r\n\r\n# MongoDB backup\r\nmongodump --host mongodb-service:27017 \\\r\n  --db jaqstack \\\r\n  --out /backup/mongodb/$(date +%Y%m%d_%H%M%S)\r\n\r\n# Redis backup\r\nredis-cli -h redis-service -p 6379 BGSAVE\r\n\r\n# Upload to cloud storage\r\naws s3 sync /backup s3://jaqstack-backups/$(date +%Y%m%d)/\n"})}),"\n",(0,s.jsx)(e.h3,{id:"disaster-recovery-plan",children:"Disaster Recovery Plan"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"RTO (Recovery Time Objective)"}),": 4 hours"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"RPO (Recovery Point Objective)"}),": 1 hour"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Backup Frequency"}),": Daily full backup, hourly incremental"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Testing"}),": Monthly disaster recovery drills"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Check the ",(0,s.jsx)(e.a,{href:"https://github.com/jaqstack/jaqstack-devops/issues",children:"GitHub Issues"})]}),"\n",(0,s.jsxs)(e.li,{children:["Join our ",(0,s.jsx)(e.a,{href:"https://discord.gg/jaqstack",children:"Discord Community"})]}),"\n",(0,s.jsxs)(e.li,{children:["Read the ",(0,s.jsx)(e.a,{href:"https://kubernetes.io/docs/",children:"Kubernetes Documentation"})]}),"\n",(0,s.jsxs)(e.li,{children:["Read the ",(0,s.jsx)(e.a,{href:"https://docs.docker.com/",children:"Docker Documentation"})]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/using-java",children:"Using Java"})," - Backend development"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/using-angular",children:"Using Angular"})," - Frontend development"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/using-nosql",children:"Using NoSQL"})," - Database integration"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);