"use strict";(self.webpackChunkjaqstack_website=self.webpackChunkjaqstack_website||[]).push([[28],{693:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"using-java","title":"Using Java","description":"Learn how to use Java with Helidon in the JAQ Stack ecosystem.","source":"@site/docs/01-using-java.md","sourceDirName":".","slug":"/using-java","permalink":"/docs/using-java","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-using-java.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"What Is JAQ Stack?","permalink":"/docs/intro"},"next":{"title":"Using Angular","permalink":"/docs/using-angular"}}');var s=r(4848),t=r(8453);const a={},l="Using Java",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"Core Features",id:"core-features",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Application Configuration",id:"application-configuration",level:3},{value:"Maven Dependencies",id:"maven-dependencies",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Examples",id:"examples",level:2},{value:"Creating a REST Resource",id:"creating-a-rest-resource",level:3},{value:"Service Layer",id:"service-layer",level:3},{value:"Repository Layer",id:"repository-layer",level:3},{value:"Application Main Class",id:"application-main-class",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Security Configuration",id:"security-configuration",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Getting Help",id:"getting-help",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-java",children:"Using Java"})}),"\n",(0,s.jsx)(n.p,{children:"Learn how to use Java with Helidon in the JAQ Stack ecosystem."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Java with Helidon is the backbone of the JAQ Stack, providing lightweight, cloud-native backend services with enterprise-grade functionality and performance."}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Java 11 or higher"}),"\n",(0,s.jsx)(n.li,{children:"Maven 3.6+"}),"\n",(0,s.jsx)(n.li,{children:"IDE (IntelliJ IDEA, Eclipse, or VS Code)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\r\ngit clone https://github.com/jaqstack/jaqstack-java.git\r\n\r\n# Navigate to the project\r\ncd jaqstack-java\r\n\r\n# Build the project\r\nmvn clean install\n"})}),"\n",(0,s.jsx)(n.h2,{id:"core-features",children:"Core Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Helidon SE"}),": Lightweight microservices framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cloud Native"}),": Built for containers and Kubernetes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Built-in authentication and authorization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Connectivity"}),": Seamless integration with NoSQL databases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RESTful APIs"}),": Clean and consistent API design with JAX-RS"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Observability"}),": Built-in metrics, health checks, and tracing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Comprehensive test suite included"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"application-configuration",children:"Application Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# application.yaml\r\nserver:\r\n  port: 8080\r\n  host: 0.0.0.0\r\n\r\napp:\r\n  name: jaqstack-backend\r\n  version: 1.0.0\r\n\r\ndatabase:\r\n  mongodb:\r\n    host: localhost\r\n    port: 27017\r\n    database: jaqstack\r\n    username: admin\r\n    password: password\r\n\r\nsecurity:\r\n  jwt:\r\n    secret: your-jwt-secret\r\n    expiration: 3600\r\n\r\nlogging:\r\n  level:\r\n    io.helidon: INFO\r\n    com.jaqstack: DEBUG\n"})}),"\n",(0,s.jsx)(n.h3,{id:"maven-dependencies",children:"Maven Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"\x3c!-- pom.xml --\x3e\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>io.helidon.microprofile.bundles</groupId>\r\n        <artifactId>helidon-microprofile</artifactId>\r\n        <version>3.2.0</version>\r\n    </dependency>\r\n    \r\n    <dependency>\r\n        <groupId>io.helidon.integrations.mongo</groupId>\r\n        <artifactId>helidon-integrations-mongo</artifactId>\r\n        <version>3.2.0</version>\r\n    </dependency>\r\n    \r\n    <dependency>\r\n        <groupId>io.helidon.security</groupId>\r\n        <artifactId>helidon-security</artifactId>\r\n        <version>3.2.0</version>\r\n    </dependency>\r\n    \r\n    <dependency>\r\n        <groupId>io.helidon.metrics</groupId>\r\n        <artifactId>helidon-metrics</artifactId>\r\n        <version>3.2.0</version>\r\n    </dependency>\r\n</dependencies>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Organization"}),": Follow the standard Helidon project structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Use global exception mappers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": Implement proper input validation with Bean Validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logging"}),": Use structured logging with appropriate levels"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": Keep API documentation up to date with OpenAPI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),": Use external configuration for environment-specific settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Health Checks"}),": Implement comprehensive health checks"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-rest-resource",children:"Creating a REST Resource"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Path("/api/users")\r\n@Produces(MediaType.APPLICATION_JSON)\r\n@Consumes(MediaType.APPLICATION_JSON)\r\npublic class UserResource {\r\n    \r\n    @Inject\r\n    private UserService userService;\r\n    \r\n    @GET\r\n    public Response getAllUsers() {\r\n        List<User> users = userService.findAll();\r\n        return Response.ok(users).build();\r\n    }\r\n    \r\n    @POST\r\n    public Response createUser(@Valid User user) {\r\n        User createdUser = userService.save(user);\r\n        return Response.status(Response.Status.CREATED)\r\n                      .entity(createdUser)\r\n                      .build();\r\n    }\r\n    \r\n    @GET\r\n    @Path("/{id}")\r\n    public Response getUserById(@PathParam("id") String id) {\r\n        return userService.findById(id)\r\n                .map(user -> Response.ok(user).build())\r\n                .orElse(Response.status(Response.Status.NOT_FOUND).build());\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"service-layer",children:"Service Layer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@ApplicationScoped\r\npublic class UserService {\r\n    \r\n    @Inject\r\n    private UserRepository userRepository;\r\n    \r\n    public List<User> findAll() {\r\n        return userRepository.findAll();\r\n    }\r\n    \r\n    public User save(User user) {\r\n        return userRepository.save(user);\r\n    }\r\n    \r\n    public Optional<User> findById(String id) {\r\n        return userRepository.findById(id);\r\n    }\r\n    \r\n    public void deleteById(String id) {\r\n        userRepository.deleteById(id);\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"repository-layer",children:"Repository Layer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ApplicationScoped\r\npublic class UserRepository {\r\n    \r\n    @Inject\r\n    private MongoClient mongoClient;\r\n    \r\n    private MongoCollection<User> getCollection() {\r\n        return mongoClient.getDatabase("jaqstack")\r\n                         .getCollection("users", User.class);\r\n    }\r\n    \r\n    public List<User> findAll() {\r\n        return getCollection().find().into(new ArrayList<>());\r\n    }\r\n    \r\n    public User save(User user) {\r\n        if (user.getId() == null) {\r\n            user.setId(UUID.randomUUID().toString());\r\n        }\r\n        getCollection().replaceOne(\r\n            eq("_id", user.getId()), \r\n            user, \r\n            new ReplaceOptions().upsert(true)\r\n        );\r\n        return user;\r\n    }\r\n    \r\n    public Optional<User> findById(String id) {\r\n        User user = getCollection().find(eq("_id", id)).first();\r\n        return Optional.ofNullable(user);\r\n    }\r\n    \r\n    public void deleteById(String id) {\r\n        getCollection().deleteOne(eq("_id", id));\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"application-main-class",children:"Application Main Class"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class Main {\r\n    public static void main(String[] args) {\r\n        Server server = Server.builder()\r\n                .port(8080)\r\n                .routing(r -> r\r\n                    .register("/api", new UserResource())\r\n                    .register("/health", HealthSupport.create())\r\n                    .register("/metrics", MetricsSupport.create())\r\n                )\r\n                .build();\r\n        \r\n        server.start();\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"security-configuration",children:"Security Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@ApplicationScoped\r\npublic class SecurityConfig {\r\n    \r\n    @Produces\r\n    public Security security() {\r\n        return Security.builder()\r\n                .addProvider(basicAuthProvider())\r\n                .addProvider(jwtProvider())\r\n                .build();\r\n    }\r\n    \r\n    private AuthenticationProvider basicAuthProvider() {\r\n        return HttpBasicAuthProvider.builder()\r\n                .userStore(userStore())\r\n                .build();\r\n    }\r\n    \r\n    private AuthenticationProvider jwtProvider() {\r\n        return JwtProvider.builder()\r\n                .verifyKey(publicKey())\r\n                .build();\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ApplicationScoped\r\npublic class DatabaseHealthCheck implements HealthCheck {\r\n    \r\n    @Inject\r\n    private MongoClient mongoClient;\r\n    \r\n    @Override\r\n    public HealthCheckResponse call() {\r\n        try {\r\n            mongoClient.getDatabase("jaqstack").runCommand(new Document("ping", 1));\r\n            return HealthCheckResponse.named("database")\r\n                    .status(HealthCheckResponse.Status.UP)\r\n                    .withData("database", "jaqstack")\r\n                    .build();\r\n        } catch (Exception e) {\r\n            return HealthCheckResponse.named("database")\r\n                    .status(HealthCheckResponse.Status.DOWN)\r\n                    .withData("error", e.getMessage())\r\n                    .build();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ApplicationScoped\r\npublic class UserMetrics {\r\n    \r\n    private final Counter userCreationCounter;\r\n    private final Timer userQueryTimer;\r\n    \r\n    public UserMetrics(MeterRegistry meterRegistry) {\r\n        this.userCreationCounter = Counter.builder("user.creation.total")\r\n                .description("Total number of users created")\r\n                .register(meterRegistry);\r\n        \r\n        this.userQueryTimer = Timer.builder("user.query.duration")\r\n                .description("User query duration")\r\n                .register(meterRegistry);\r\n    }\r\n    \r\n    public void incrementUserCreation() {\r\n        userCreationCounter.increment();\r\n    }\r\n    \r\n    public void recordQueryDuration(Duration duration) {\r\n        userQueryTimer.record(duration);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port Already in Use"}),": Change the server port in application.yaml"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Connection"}),": Ensure MongoDB is running and accessible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Issues"}),": Increase JVM heap size for large applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CDI Issues"}),": Ensure proper CDI annotations are used"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Check the ",(0,s.jsx)(n.a,{href:"https://github.com/jaqstack/jaqstack-java/issues",children:"GitHub Issues"})]}),"\n",(0,s.jsxs)(n.li,{children:["Join our ",(0,s.jsx)(n.a,{href:"https://discord.gg/jaqstack",children:"Discord Community"})]}),"\n",(0,s.jsxs)(n.li,{children:["Read the ",(0,s.jsx)(n.a,{href:"https://helidon.io/docs/latest/",children:"Helidon Documentation"})]}),"\n",(0,s.jsxs)(n.li,{children:["Read the ",(0,s.jsx)(n.a,{href:"https://docs.jaqstack.com/faq",children:"FAQ"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/using-angular",children:"Using Angular"})," - Frontend development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/using-nosql",children:"Using NoSQL"})," - Database integration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/devops",children:"DevOps"})," - Deployment and operations"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);